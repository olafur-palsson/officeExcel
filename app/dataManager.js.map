{"version":3,"sources":["../appES6/dataManagerES5.js"],"names":[],"mappings":"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","file":"dataManager.js","sourcesContent":["\r\ndefine(require => {\r\n\tconst DAY_IN_MS = 86400000\r\n\tconst $req  = require(\"request\")\r\n\tconst $xmlh = require(\"xmlHelper\")\r\n\tconst $db   = require(\"database\")\r\n\tconst $render = require(\"render\")\r\n\r\n\r\n\tconst getDateURLrequestString = () => {\r\n\r\n\t\tconst URLSettings  = $db.get(\"settings\").requestAvailability\r\n\t\tlet string         = URLSettings[\"URL\"]\r\n\t\tconst n            = URLSettings[\"days\"]\r\n\t\tconst today        = new Date()\r\n\t\tlet nDaysInAdvance = new Date()\r\n\r\n\t\tnDaysInAdvance.setDate(nDaysInAdvance.getDate() + n)\r\n\t\tstring += \"arrivalDate=\"   + today.getUTCFullYear() + \"-\" + (today.getUTCMonth() + 1) + \"-\" + today.getUTCDate()\r\n\t\tstring += \"&\"\r\n\t\tstring += \"departureDate=\" + nDaysInAdvance.getUTCFullYear() + \"-\" + (nDaysInAdvance.getUTCMonth() + 1) + \"-\" + nDaysInAdvance.getUTCDate()\r\n\t\t\r\n\t\treturn string\r\n\t}\r\n\r\n\r\n\tconst objectToArrayWithHeaders = object => {\r\n\r\n\t\tlet data = []\r\n\t\tfor(let key in object) {\r\n\t\t\tconst element = [key, object[key]]\r\n\t\t\tdata.push(element)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\r\n\tconst stringToDate = dateString => {\r\n\r\n\t\tconst array = dateString.split(\"-\")\r\n\t\tconst y = array[0]\r\n\t\tconst m = parseInt(array[1]) + 1\r\n\t\tconst d = array[2]\r\n\t\tconst date = new Date(y, m, d)\r\n\r\n\t\treturn date\r\n\t}\r\n\r\n\r\n\tconst dateToString = dateObject => {\r\n\t\tconst y = dateObject.getUTCFullYear()\r\n\t\tconst m = formatNumber(dateObject.getUTCMonth() -1)\r\n\t\tconst d = formatNumber(dateObject.getUTCDate()) \r\n\t\tconst dateArray = [y, m, d]\r\n\t\treturn dateArray.join(\"-\")\r\n\t}\r\n\r\n\r\n\tconst formatNumber = (number) => {\r\n\t\tlet string = \"\" + number\r\n\t\tif(number < 10) string = \"0\" + string;\r\n\t\treturn string\r\n\t}\r\n\r\n\r\n\tconst daysBetweenDatesStringFormat = (date1, date2) => {\r\n\t\tconst bookingDate = stringToDate(date1)\r\n\t\tconst contractDate = stringToDate(date2)\r\n\t\tconst difference = bookingDate - contractDate\r\n\t\treturn difference\r\n\t}\r\n\r\n\r\n\tconst addOneDayToDateWithHyphens = dateString => {\r\n\t\tlet date = stringToDate(dateString)\r\n\t\tdate = date.setDate(date.getDate() + 1)\r\n\t\tdate = new Date(date)\r\n\t\tdate = dateToString(date)\r\n\t\treturn date\r\n\t}\r\n\r\n\r\n\tconst getGroupFormDataAsArray = (form) => {\r\n\r\n\t\tconst divs = Array.from(form.querySelectorAll(\"div\"))\r\n\t\tconst data = []\r\n\t\tdivs.forEach(div => {\r\n\t\t\tconst subArray = []\r\n\t\t\tconst inputs = Array.from(div.querySelectorAll(\"input\"))\r\n\t\t\tinputs.forEach(input => {\r\n\t\t\t\tsubArray.push(input.value)\r\n\t\t\t})\r\n\t\t\tdata.push(subArray)\r\n\t\t})\r\n\r\n\t\treturn data\r\n\t}\r\n\r\n\r\n  const getRoomTypes = () => {\r\n\r\n  \tconst settingsString = window.localStorage.getItem(\"settings\")\r\n  \tconst settings = JSON.parse(settingsString)\r\n    const roomTypeList = settings.roomTypes\r\n    let array = []\r\n    for(let key in roomTypeList) {\r\n      array.push(key)\r\n    }\r\n\r\n    return array\r\n  }\r\n\r\n\r\n  const storeAvailability = (availability) => {\r\n\r\n    const roomTypes = getRoomTypes()\r\n    const storage = {}\r\n    storage[\"total\"] = {}\r\n    roomTypes.forEach(type => {\r\n      storage[type] = {}\r\n    })\r\n\r\n    for(let type in availability) {\r\n      for(let day in availability[type]) {\r\n        storage[type][day] = availability[type][day][0]\r\n        if(storage[\"total\"][day] == undefined) storage[\"total\"][day] = 0\r\n        storage[\"total\"][day] += availability[type][day][0]\r\n      }\r\n    }\r\n    const storageJSON = JSON.stringify(storage)\r\n    window.localStorage.setItem(\"availability\", storageJSON)\r\n    const ref = firebase.firestore().doc(\"leifur/availability\")\r\n    ref.set(storage)\r\n  }\r\n\r\n\r\n\tconst refreshData = () => {\r\n\r\n\t\tconst requestString = getDateURLrequestString()\r\n\t\tconst xmlPromise = $xmlh.getAndStoreXML(requestString)\r\n    xmlPromise.then(doc => {\r\n      const table = $xmlh.xmlToTable(doc)\r\n      $render.renderRates(table.rates)\r\n      $render.renderAvailability(table.availability)\r\n    })\r\n\t}\r\n\r\n  const getMinimumRoomsSupposedToBeAvailable = () => {\r\n\r\n    const settings = $db.get(\"settings\")\r\n    const roomQuantities = settings.totalNumberOfRooms\r\n    const closeOutFloor  = settings.closeOut.floor\r\n    const minimum        = settings.closeOut.minimum\r\n    const total          = roomQuantities.total\r\n    const returnObject   = {}\r\n    for(let key in roomQuantities) {\r\n      if(key == \"total\") continue;\r\n      const minimumAmountFromRatio = Math.ceil(roomQuantities[key] / total * closeOutFloor)\r\n      if(minimumAmountFromRatio > minimum) {\r\n        returnObject[key] = minimumAmountFromRatio\r\n      }\r\n      else {\r\n        returnObject[key] = minimum\r\n      }  \r\n    }\r\n\r\n    return returnObject\r\n  }\r\n\r\n\r\n  // this is the worst code in the whole application, if you have a better idea\r\n  // that makes it more readable, then by all means, please rewrite\r\n  // if you're just going to reduce it by two for-loops then seriously\r\n  // you need to rethink what good code looks like\r\n  const formatCloseOutsToTableFormat = object => {\r\n    let tableObject = {}\r\n    //make an object with dates and close-outs\r\n    for(let key in object) {\r\n      for(let day in object[key])\r\n        tableObject[day] = [day]\r\n      break;\r\n    }\r\n\r\n    //finish making the object with date and close-outs\r\n    for(let roomType in object)\r\n      for(let day in object[roomType])\r\n        tableObject[day].push(object[roomType][day])\r\n\r\n    //convert the object to a format that makeTableFromArray can use\r\n    let table = []\r\n    for(let key in tableObject) {\r\n      table.push(tableObject[key])\r\n    }\r\n\r\n    return table\r\n  }\r\n\r\n\r\n  const shouldBeOpen = (roomType, day, n) => {\r\n    const minimums = getMinimumRoomsSupposedToBeAvailable()\r\n    const min      = minimums[roomType]\r\n    if(min >= n) \r\n      return \"Closed\" //\"false by availability\"\r\n\r\n    const $alg  = require(\"algorithm\")\r\n    const algorithmPrice  = $alg.calculateDay([day, n])[1]\r\n    const contractPrice   = $alg.calculateContractDay([day, n])[1]\r\n    const comparisonPrice = algorithmPrice * 0.85 - 20\r\n    if(comparisonPrice > contractPrice)\r\n      return \"Closed\" //\"false by price\"\r\n\r\n    return \"Open\"\r\n  }\r\n\r\n\r\n  const getCalculatedCloseOuts = () => {\r\n\r\n    const availability = $db.get(\"availability\")\r\n    const returnObject = {}\r\n    for(let roomType in availability) {\r\n      if(roomType == \"total\") continue\r\n      returnObject[roomType] = {}\r\n      for(let day in availability[roomType]) {\r\n        const n = availability[roomType][day]\r\n        returnObject[roomType][day] = shouldBeOpen(roomType, day, n)\r\n      }\r\n    }\r\n\r\n    return returnObject\r\n  }\r\n\r\n  const getCloseOutArrayAndRender = () => {\r\n    const closeOuts     = getCalculatedCloseOuts()\r\n    const closeOutTable = formatCloseOutsToTableFormat(closeOuts)\r\n    const table         = $render.makeTableFromArray(closeOutTable, [\"date\", \"sgl\", \"dbl\"])\r\n    const container     = document.querySelector(\".closeOuts\")\r\n    container.appendChild(table)\r\n  }\r\n\r\n\r\n\r\n\treturn {\r\n\t\tgetDateURLrequestString: getDateURLrequestString,\r\n\t\tgetGroupFormDataAsArray: getGroupFormDataAsArray,\r\n\t\trefreshData: refreshData,\r\n\t\tgetRoomTypes: getRoomTypes,\r\n\t\taddOneDayToDateWithHyphens: addOneDayToDateWithHyphens,\r\n\t\tdateToString: dateToString,\r\n\t\tstringToDate: stringToDate,\r\n\t\tdaysBetweenDatesStringFormat: daysBetweenDatesStringFormat,\r\n\t\tobjectToArrayWithHeaders: objectToArrayWithHeaders,\r\n    getCalculatedCloseOuts: getCalculatedCloseOuts,\r\n    getCloseOutArrayAndRender: getCloseOutArrayAndRender\r\n\t}\r\n})"]}