{"version":3,"sources":["../appES6/dataManagerES5.js"],"names":[],"mappings":"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","file":"dataManager.js","sourcesContent":["\r\ndefine(require => {\r\n  const $make = require(\"make\")\r\n\tconst DAY_IN_MS = 86400000\r\n\tconst $req  = require(\"request\")\r\n  const $dh   = require(\"dateHelper\")\r\n\tconst $xmlh = require(\"xmlHelper\")\r\n\tconst $db   = require(\"database\")\r\n  const $alg  = require(\"algorithm\")\r\n\r\n  const get = key => $db.get(key)\r\n\r\n  const set = (key, data) => {\r\n    $db.set(key, data)\r\n  }\r\n\r\n  const uploadSettings = settings => {\r\n    set(\"settings\", settings)\r\n    $db.uploadSettings(settings)\r\n  }\r\n\r\n\tconst getDateURLrequestString = (daysAreChosen) => {\r\n    const input = document.getElementById(\"days\")\r\n\t\tconst URLSettings  = $db.get(\"settings\").requestAvailability\r\n\t\tlet string         = URLSettings[\"URL\"]\r\n\t\tlet n            = URLSettings[\"days\"]\r\n    if(daysAreChosen) n = parseInt(input.value)\r\n\t\tconst today        = new Date()\r\n\t\tlet nDaysInAdvance = new Date()\r\n\r\n\r\n\t\tnDaysInAdvance.setDate(nDaysInAdvance.getDate() + n)\r\n\t\tstring += \"arrivalDate=\"   + today.getUTCFullYear() + \"-\" + (today.getUTCMonth() + 1) + \"-\" + today.getUTCDate()\r\n\t\tstring += \"&\"\r\n\t\tstring += \"departureDate=\" + nDaysInAdvance.getUTCFullYear() + \"-\" + (nDaysInAdvance.getUTCMonth() + 1) + \"-\" + nDaysInAdvance.getUTCDate()\r\n\t\t$db.set(\"requestString\", string)\r\n\t\treturn string\r\n\t}\r\n\r\n\r\n\tconst objectToArrayWithHeaders = object => {\r\n\r\n\t\tlet data = []\r\n\t\tfor(let key in object) {\r\n\t\t\tconst element = [key, object[key]]\r\n\t\t\tdata.push(element)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\r\n  const availabilityToTableFormat = (object) => {\r\n\r\n    let array = [[\"date\"]]\r\n    let compressedObject = {}\r\n    for(let key in object) {\r\n      array[0].push(key)\r\n      for(let date in object[key]) {\r\n        compressedObject[date] = []\r\n      }\r\n    }\r\n    for(let key in object) {\r\n      for(let date in object[key]) {\r\n        compressedObject[date].push(object[key][date][0])\r\n      }\r\n    }\r\n    for(let date in compressedObject) {\r\n      let subarray = [date]\r\n      compressedObject[date].forEach(text => {\r\n        subarray.push(text)\r\n      })\r\n      array.push(subarray)\r\n    }\r\n    return array\r\n  }\r\n\r\n\r\n\tconst getGroupFormDataAsArray = (form) => {\r\n\r\n\t\tconst divs = Array.from(form.querySelectorAll(\"div\"))\r\n\t\tconst data = []\r\n\t\tdivs.forEach(div => {\r\n\t\t\tconst subArray = []\r\n\t\t\tconst inputs = Array.from(div.querySelectorAll(\"input\"))\r\n\t\t\tinputs.forEach(input => {\r\n\t\t\t\tsubArray.push(input.value)\r\n\t\t\t})\r\n\t\t\tdata.push(subArray)\r\n\t\t})\r\n\r\n\t\treturn data\r\n\t}\r\n\r\n\r\n  const getAvailabilityPromise = () => {\r\n    return $xmlh.getAndStoreXML(get(\"requestString\"))\r\n  }\r\n\r\n  const xmlToTable = doc => {\r\n    return $xmlh.xmlToTable(doc)\r\n  }\r\n\r\n  const getMinimumRoomsSupposedToBeAvailable = () => {\r\n\r\n    const settings = $db.get(\"settings\")\r\n    const roomQuantities = settings.totalNumberOfRooms\r\n    const closeOutFloor  = settings.closeOut.floor\r\n    const minimum        = settings.closeOut.minimum\r\n    const total          = roomQuantities.total\r\n    const returnObject   = {}\r\n    for(let key in roomQuantities) {\r\n      if(key == \"total\") continue;\r\n      const minimumAmountFromRatio = Math.ceil(roomQuantities[key] / total * closeOutFloor)\r\n      if(minimumAmountFromRatio > minimum) {\r\n        returnObject[key] = minimumAmountFromRatio\r\n      }\r\n      else {\r\n        returnObject[key] = minimum\r\n      }  \r\n    }\r\n\r\n    return returnObject\r\n  }\r\n\r\n\r\n  // this is the worst code in the whole application, if you have a better idea\r\n  // that makes it more readable, then by all means, please rewrite\r\n  // if you're just going to reduce it by two for-loops then seriously\r\n  // you need to rethink what good code looks like\r\n  const formatCloseOutsToTableFormat = object => {\r\n    let tableObject = {}\r\n    //make an object with dates and close-outs\r\n    for(let key in object) {\r\n      for(let day in object[key])\r\n        tableObject[day] = [day]\r\n      break;\r\n    }\r\n\r\n    //finish making the object with date and close-outs\r\n    for(let roomType in object)\r\n      for(let day in object[roomType])\r\n        tableObject[day].push(object[roomType][day])\r\n\r\n    //convert the object to a format that makeTableFromArray can use\r\n    let table = []\r\n    for(let key in tableObject) {\r\n      table.push(tableObject[key])\r\n    }\r\n\r\n    return table\r\n  }\r\n\r\n\r\n  const shouldBeOpen = (roomType, day, n) => {\r\n    const minimums = getMinimumRoomsSupposedToBeAvailable()\r\n    const min      = minimums[roomType]\r\n    if(min >= n) \r\n      return \"Closed\" //\"false by availability\"\r\n\r\n    const $alg  = require(\"algorithm\")\r\n    const algorithmPrice  = $alg.calculateDay([day, n])[1]\r\n    const contractPrice   = $alg.calculateContractDay([day, n])[1]\r\n    const comparisonPrice = algorithmPrice * 0.85 - 20\r\n    if(comparisonPrice > contractPrice)\r\n      return \"Closed\" //\"false by price\"\r\n\r\n    return \"Open\"\r\n  }\r\n\r\n  const getRoomTypes = () => {\r\n    const settings = get(\"settings\")\r\n    const roomTypeList = settings.roomTypes\r\n    let array = []\r\n    for(let key in roomTypeList) {\r\n      array.push(key)\r\n    }\r\n\r\n    return array\r\n  }\r\n\r\n  const getPricesFromForm = groupForm => {\r\n    const data = getGroupFormDataAsArray(groupForm)\r\n    return $alg.calculateGroupPrice(data)\r\n  }\r\n\r\n\r\n  const getCalculatedCloseOuts = () => {\r\n\r\n    const availability = $db.get(\"availability\")\r\n    console.log(\"This is what I'm rendering bro\")\r\n    console.log(availability)\r\n    const returnObject = {}\r\n    for(let roomType in availability) {\r\n      if(roomType == \"total\") continue\r\n      returnObject[roomType] = {}\r\n      for(let day in availability[roomType]) {\r\n        const n = availability[roomType][day]\r\n        returnObject[roomType][day] = shouldBeOpen(roomType, day, n)\r\n      }\r\n    }\r\n\r\n    return returnObject\r\n  }\r\n\r\n  const loadSettingsFromDatabase = (callback) => {\r\n    return $db.loadSettings(callback)\r\n  }\r\n\r\n  const uploadRoomTypes = (container) => {\r\n    const lists = Array.from(container.querySelectorAll(\"ul\"))\r\n    let roomTypesObject = {}\r\n    lists.forEach(ul => {\r\n      console.log(ul)\r\n      const arrayName = ul.dataset.roomTypeClass\r\n      let list = Array.from(ul.querySelectorAll(\"li\"))\r\n      list = list.map(item => item.dataset.value)\r\n      roomTypesObject[arrayName] = list\r\n    })\r\n    let settings = get(\"settings\")\r\n    settings[\"roomTypes\"] = roomTypesObject\r\n    uploadSettings(settings)\r\n  }\r\n\r\n\r\n\treturn {\r\n    get: get,\r\n    set: set,\r\n    getRoomTypes: getRoomTypes,\r\n\t\tgetDateURLrequestString: getDateURLrequestString,\r\n\t\tgetGroupFormDataAsArray: getGroupFormDataAsArray,\r\n\t\tobjectToArrayWithHeaders: objectToArrayWithHeaders,\r\n    getCalculatedCloseOuts: getCalculatedCloseOuts,\r\n    getAvailabilityPromise: getAvailabilityPromise,\r\n    loadSettingsFromDatabase: loadSettingsFromDatabase,\r\n    xmlToTable: xmlToTable,\r\n    availabilityToTableFormat: availabilityToTableFormat,\r\n    formatCloseOutsToTableFormat: formatCloseOutsToTableFormat,\r\n    getPricesFromForm: getPricesFromForm,\r\n    uploadSettings: uploadSettings,\r\n    uploadRoomTypes: uploadRoomTypes,\r\n\r\n\t}\r\n})"]}