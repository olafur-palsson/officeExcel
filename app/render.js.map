{"version":3,"sources":["../appES6/renderES5.js"],"names":[],"mappings":";;AAAA,OAAO,YAAM;AACX,MAAM,qBAAqB,SAArB,kBAAqB,CAAC,KAAD,EAAQ,QAAR,EAAqB;AAC9C,QAAM,QAAQ,SAAS,aAAT,CAAuB,OAAvB,CAAd;AACA,QAAG,YAAY,SAAf,EAA0B;AACxB,UAAM,YAAY,SAAS,aAAT,CAAuB,IAAvB,CAAlB;AACA,eAAS,OAAT,CAAiB,UAAC,IAAD,EAAU;AACzB,YAAM,WAAW,SAAS,cAAT,CAAwB,IAAxB,CAAjB;AACA,YAAM,KAAW,SAAS,aAAT,CAAuB,IAAvB,CAAjB;AACA,WAAU,WAAV,CAAsB,QAAtB;AACA,kBAAU,WAAV,CAAsB,EAAtB;AACA,cAAM,WAAN,CAAkB,SAAlB;AACD,OAND;AAOD;;AAED,QAAG,MAAM,CAAN,EAAS,CAAT,KAAe,SAAlB,EAA6B,MAAM,mCAAN;AAC7B,UAAM,OAAN,CAAc,UAAC,GAAD,EAAS;AACrB,UAAM,KAAK,SAAS,aAAT,CAAuB,IAAvB,CAAX;AACA,UAAI,OAAJ,CAAY,UAAC,IAAD,EAAU;AACpB,YAAM,KAAM,SAAS,aAAT,CAAuB,IAAvB,CAAZ;AACA,YAAM,MAAM,SAAS,cAAT,CAAwB,IAAxB,CAAZ;AACA,WAAG,WAAH,CAAe,GAAf;AACA,WAAG,WAAH,CAAe,EAAf;AACD,OALD;AAMA,YAAM,WAAN,CAAkB,EAAlB;AACD,KATD;AAUA,WAAO,KAAP;AACD,GAzBD;;AA2BA,MAAM,4BAA4B,SAA5B,yBAA4B,CAAC,MAAD,EAAY;;AAE5C,QAAI,QAAQ,CAAC,CAAC,MAAD,CAAD,CAAZ;AACA,QAAI,mBAAmB,EAAvB;AACA,SAAI,IAAI,GAAR,IAAe,MAAf,EAAuB;AACrB,YAAM,CAAN,EAAS,IAAT,CAAc,GAAd;AACA,WAAI,IAAI,IAAR,IAAgB,OAAO,GAAP,CAAhB,EAA6B;AAC3B,yBAAiB,IAAjB,IAAyB,EAAzB;AACD;AACF;;AAED,SAAI,IAAI,IAAR,IAAe,MAAf,EAAuB;AACrB,WAAI,IAAI,KAAR,IAAgB,OAAO,IAAP,CAAhB,EAA6B;AAC3B,yBAAiB,KAAjB,EAAuB,IAAvB,CAA4B,OAAO,IAAP,EAAY,KAAZ,EAAkB,CAAlB,CAA5B;AACD;AACF;;AAf2C,+BAiBpC,MAjBoC;AAkB1C,UAAI,WAAW,CAAC,MAAD,CAAf;AACA,uBAAiB,MAAjB,EAAuB,OAAvB,CAA+B,gBAAQ;AACrC,iBAAS,IAAT,CAAc,IAAd;AACD,OAFD;AAGA,YAAM,IAAN,CAAW,QAAX;AAtB0C;;AAiB5C,SAAI,IAAI,MAAR,IAAgB,gBAAhB,EAAkC;AAAA,YAA1B,MAA0B;AAMjC;;AAED,WAAO,KAAP;AACD,GA1BD;;AA6BA,MAAM,uBAAuB,SAAvB,oBAAuB,CAAC,cAAD,EAAoB;AAC/C,QAAM,QAAQ,0BAA0B,cAA1B,CAAd;AACA,YAAQ,GAAR,CAAY,KAAZ;AACA,WAAO,mBAAmB,KAAnB,CAAP;AACD,GAJD;;AAOA,SAAO;AACL,wBAAoB,kBADf;AAEL,+BAA2B,yBAFtB;AAGL,0BAAsB;AAHjB,GAAP;AAKD,CArED","file":"render.js","sourcesContent":["define(() => {\r\n  const makeTableFromArray = (array, theaders) => {\r\n    const table = document.createElement(\"table\")\r\n    if(theaders != undefined) {\r\n      const headerRow = document.createElement(\"tr\")\r\n      theaders.forEach((text) => {\r\n        const textNode = document.createTextNode(text)\r\n        const td       = document.createElement(\"td\")\r\n        td       .appendChild(textNode)\r\n        headerRow.appendChild(td)\r\n        table.appendChild(headerRow)\r\n      })\r\n    }\r\n\r\n    if(array[0][0] == undefined) alert(\"Some function gave me not a table\")\r\n    array.forEach((key) => {\r\n      const tr = document.createElement(\"tr\")\r\n      key.forEach((item) => {\r\n        const td  = document.createElement(\"td\")\r\n        const txt = document.createTextNode(item)\r\n        td.appendChild(txt)\r\n        tr.appendChild(td)\r\n      })\r\n      table.appendChild(tr)\r\n    })\r\n    return table\r\n  }\r\n\r\n  const availabilityToTableFormat = (object) => {\r\n\r\n    let array = [[\"date\"]]\r\n    let compressedObject = {}\r\n    for(let key in object) {\r\n      array[0].push(key)\r\n      for(let date in object[key]) {\r\n        compressedObject[date] = []\r\n      }\r\n    }\r\n\r\n    for(let key in object) {\r\n      for(let date in object[key]) {\r\n        compressedObject[date].push(object[key][date][0])\r\n      }\r\n    }\r\n\r\n    for(let date in compressedObject) {\r\n      let subarray = [date]\r\n      compressedObject[date].forEach(text => {\r\n        subarray.push(text)\r\n      })\r\n      array.push(subarray)\r\n    }\r\n\r\n    return array\r\n  }\r\n\r\n\r\n  const getAvailabilityTable = (availabilities) => {\r\n    const array = availabilityToTableFormat(availabilities)\r\n    console.log(array)\r\n    return makeTableFromArray(array)\r\n  }\r\n\r\n\r\n  return {\r\n    makeTableFromArray: makeTableFromArray,\r\n    availabilityToTableFormat: availabilityToTableFormat,\r\n    getAvailabilityTable: getAvailabilityTable,\r\n  }\r\n})"]}