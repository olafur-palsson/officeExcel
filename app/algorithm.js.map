{"version":3,"sources":["../appES6/algorithmES5.js"],"names":[],"mappings":"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","file":"algorithm.js","sourcesContent":["\r\ndefine((require) => {\r\n  const $db = require(\"database\")\r\n  let settings\r\n  let rateParameters\r\n\r\n  const weekendValue = date => {\r\n      const weekendBonus = rateParameters.weekendWeight\r\n      const day = date.getDay()\r\n      if(day == 4) return weekendBonus * 0.5\r\n      if(day == 6 || day == 5) \r\n\r\n        return weekendBonus\r\n      return 0\r\n  }\r\n\r\n  const seasonalValue = date => {\r\n\r\n    const seasonalBonus = rateParameters.seasonalWeight\r\n    const month = date.getMonth()\r\n    const tourists = settings.numberOfTouristsJanIs0\r\n    let   max = 0\r\n    let   min = Infinity\r\n\r\n    for(let key in tourists) {\r\n      if(parseInt(tourists[key]) > max) max = tourists[key]\r\n      if(parseInt(tourists[key]) < min) min = tourists[key]\r\n    }\r\n    const ratio = (tourists[month] - min) / (max - min) \r\n\r\n    return ratio * seasonalBonus\r\n  }\r\n\r\n\r\n  const superDayValue = date => {\r\n    \r\n    let dateString = \"\"\r\n    dateString += date.getDate() + \".\"\r\n    dateString += (date.getMonth() + 1) + \".\"\r\n    dateString += date.getUTCFullYear()\r\n\r\n    const superdays = settings.superDays\r\n    const weight = rateParameters.superDayWeight\r\n    for(let key in superdays) {\r\n      if(key == dateString) \r\n\r\n        return superdays[key] * weight\r\n    }\r\n    return 0\r\n  }\r\n\r\n\r\n  const calculateDay = (dateAndAvailability) => {\r\n\r\n    settings = $db.get(\"settings\")\r\n    rateParameters = settings.rateParameter\r\n    const _rP = rateParameters\r\n\r\n    const dateString     = dateAndAvailability[0]\r\n    const availability   = parseInt(dateAndAvailability[1])\r\n    const dateObject     = new Date(dateString)\r\n    const now            = Date.now()\r\n\r\n    const daysUntilDate  = 1 + Math.floor((dateObject - now)/1000/60/60/24);\r\n    const expectedRooms  = Math.min(Math.pow(daysUntilDate/180, 0.7), 1) //\r\n    const weekendBonus   = weekendValue(dateObject)\r\n    const seasonalBonus  = seasonalValue(dateObject)\r\n    const occupancy      = availability/47\r\n    const occupancyBonus = (1-occupancy) * _rP.occupancyWeight //\r\n    const futureBonus    = (1-expectedRooms)*_rP.futureWeight //\r\n    const lastRoomsBonus = Math.pow(1-occupancy, 8)*_rP.occupancyWeight*1.5 //\r\n    const sellOffRatio   = Math.min(Math.pow((187 - daysUntilDate)/180, 6.5), 1) //\r\n    const sellOffDisc    = sellOffRatio * _rP.sellOff //\r\n    const superDayBonus  = superDayValue(dateObject) //\r\n\r\n    //Self explanatory\r\n    const rateShift   = occupancyBonus - futureBonus\r\n    //Basic Rate\r\n    let algorithmRate = _rP.priceFloor + rateShift + seasonalBonus\r\n    //Add modifiers for weekends, newYears and other high demand days\r\n    algorithmRate += weekendBonus + superDayBonus\r\n    //Add edge cases in case of surplus or shortage\r\n    algorithmRate += lastRoomsBonus - sellOffDisc\r\n    //Lowest price a room should be sold at\r\n    const absFloorPlus   = _rP.absoluteFloor + weekendBonus\r\n    //Compare lowest rate vs algorithm\r\n    const finalRate      = Math.max(absFloorPlus, algorithmRate)\r\n\r\n    return [dateString, finalRate, availability]\r\n  }\r\n\r\n\r\n  const getRates = (availabilityInput) => {\r\n\r\n    let totalObj = {}\r\n    for(let roomClass in availabilityInput) {\r\n      for(let day in availabilityInput[roomClass]) {\r\n        if(totalObj[day] == undefined) totalObj[day] = 0\r\n        totalObj[day] += parseInt(availabilityInput[roomClass][day])\r\n      }\r\n    }\r\n\r\n    settings = $db.get(\"settings\")\r\n    rateParameters = settings.rateParameter\r\n\r\n    const priceFloor      = rateParameters.priceFloor\r\n    const absPriceFloor   = rateParameters.absoluteFloor\r\n    const seasonalWeight  = rateParameters.seasonalWeight\r\n    const futureWeight    = rateParameters.futureWeight\r\n    const superDayWeight  = rateParameters.superDayWeight\r\n    const occupancyWeight = rateParameters.occupancyWeight\r\n    const sellOffWeight   = rateParameters.sellOff\r\n\r\n    let total = []\r\n    let i = 0\r\n    for(let day in totalObj) {\r\n      total[i] = [day, totalObj[day]]\r\n      i++\r\n    }\r\n    const ratesCalculated  = total.map(dateAndAvailability => {\r\n      return calculateDay(dateAndAvailability)\r\n    })\r\n\r\n    return ratesCalculated\r\n  }\r\n\r\n\r\n  const calculateContractDay = (dateAndAvailability) => {\r\n    const contract = $db.get(\"settings\").retailContract\r\n    const $dm      = require(\"dataManager\")\r\n    const date = dateAndAvailability[0]\r\n    const availability = dateAndAvailability[1]\r\n\r\n    let minimum = Infinity\r\n    let applicableDate\r\n    for(let key in contract) {\r\n      const difference = $dm.daysBetweenDatesStringFormat(date, key)\r\n      if(difference < minimum && difference > 0) {  \r\n  \r\n        minimum = difference\r\n        applicableDate = key\r\n      }\r\n    }\r\n    const applicableRate = contract[applicableDate]['dbl']\r\n\r\n    return [date, applicableRate]\r\n  }\r\n\r\n\r\n  const calculateContractPrices = (bookings) => {\r\n    console.log(\"contracts\")\r\n    return calculateBooking(bookings, calculateContractDay)\r\n  }\r\n\r\n\r\n  const calculateAlgorithmPrices = (bookings) => {\r\n    console.log(\"algorithm\")\r\n    return calculateBooking(bookings, calculateDay)\r\n  }\r\n\r\n\r\n  const calculateBooking = (bookings, calculator) => {\r\n\r\n    const $dm = require(\"dataManager\")\r\n    let prices = []\r\n\r\n    bookings.forEach((booking, index) => {\r\n      const $dm = require(\"dataManager\")\r\n      let sum = 0\r\n      let date = booking[0]\r\n      const nights = booking[1]\r\n      const bookingInfo = {}\r\n\r\n      for(let i = 0; i < booking[1]; i++) {\r\n        console.log(date)\r\n        const availability = $db.getAvailabilityForDate(\"total\", date)\r\n        if(availability == undefined) {\r\n          const $render = require(\"render\")\r\n          console.log($render)\r\n          $render.makeError(\"Most likely wrong date in the booking. Please check.\")\r\n        }\r\n        console.log(availability)\r\n        const rate = calculator([date, availability])[1]\r\n        console.log(rate)\r\n        date = $dm.addOneDayToDateWithHyphens(date)\r\n        sum += rate\r\n      }\r\n\r\n      bookingInfo[\"rate\"] = sum / nights\r\n      bookingInfo[\"total\"] = sum\r\n      bookingInfo[\"name\"] = \"Booking \" + (index + 1)\r\n\r\n      prices.push(bookingInfo)\r\n    })\r\n\r\n    return prices\r\n  }\r\n\r\n\r\n  const calculateGroupPrice = (bookings) => {\r\n\r\n    const algorithmBookings = calculateAlgorithmPrices(bookings)\r\n    const contractBookings  = calculateContractPrices(bookings)\r\n\r\n    let finalGroupPrices = algorithmBookings\r\n    contractBookings.forEach((booking, index) => {\r\n      if(booking[\"rate\"] > algorithmBookings[index][\"rate\"])\r\n        finalGroupPrices[index] = booking\r\n    })\r\n    return finalGroupPrices\r\n  }\r\n\r\n\r\n\r\n  return {\r\n    getRates: getRates,\r\n    calculateGroupPrice: calculateGroupPrice,\r\n    calculateContractPrices: calculateContractPrices,\r\n    calculateAlgorithmPrices: calculateAlgorithmPrices,\r\n    calculateDay: calculateDay,\r\n    calculateContractDay: calculateContractDay\r\n  }\r\n})"]}