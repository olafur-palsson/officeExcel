{"version":3,"sources":["../appES6/algorithmES5.js"],"names":[],"mappings":"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","file":"algorithm.js","sourcesContent":["define((require) => {\r\n  const render = require(\"render\")\r\n\r\n  let settings\r\n  let rateParameters\r\n\r\n  const weekendValue = date => {\r\n      const weekendBonus = rateParameters.weekendWeight\r\n      const day = date.getDay()\r\n      if(day == 4) return weekendBonus * 0.5\r\n      if(day == 6 || day == 5) return weekendBonus\r\n      return 0\r\n  }\r\n\r\n  const seasonalValue = date => {\r\n    const seasonalBonus = rateParameters.seasonalWeight\r\n    const month = date.getMonth()\r\n    const tourists = settings.numberOfTouristsJanIs0\r\n    let   max = 0\r\n    let   min = Infinity\r\n\r\n    for(let key in tourists) {\r\n      if(parseInt(tourists[key]) > max) max = tourists[key]\r\n      if(parseInt(tourists[key]) < min) min = tourists[key]\r\n    }\r\n\r\n    const ratio = (tourists[month] - min) / (max - min) \r\n\r\n    return ratio * seasonalBonus\r\n  }\r\n\r\n  const superDayValue = date => {\r\n    \r\n    let dateString = \"\"\r\n    dateString += date.getDate() + \".\"\r\n    dateString += (date.getMonth() + 1) + \".\"\r\n    dateString += date.getUTCFullYear()\r\n\r\n    const superdays = settings.superDays\r\n    const weight = rateParameters.superDayWeight\r\n    for(let key in superdays) {\r\n      if(key == dateString) return superdays[key] * weight\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  const getRates = (availabilityInput) => {\r\n\r\n    let totalObj = {}\r\n    for(let roomClass in availabilityInput) {\r\n      for(let day in availabilityInput[roomClass]) {\r\n        if(totalObj[day] == undefined) totalObj[day] = 0\r\n        totalObj[day] += parseInt(availabilityInput[roomClass][day])\r\n      }\r\n    }\r\n\r\n    console.log(availabilityInput)\r\n\r\n    const settingsString = window.localStorage.getItem(\"settings\")\r\n    settings = JSON.parse(settingsString)\r\n    rateParameters = settings.rateParameter\r\n\r\n    const priceFloor      = rateParameters.priceFloor\r\n    const absPriceFloor   = rateParameters.absoluteFloor\r\n    const seasonalWeight  = rateParameters.seasonalWeight\r\n    const futureWeight    = rateParameters.futureWeight\r\n    const superDayWeight  = rateParameters.superDayWeight\r\n    const occupancyWeight = rateParameters.occupancyWeight\r\n    const sellOffWeight   = rateParameters.sellOff\r\n\r\n    let total = []\r\n    let i = 0\r\n    for(let day in totalObj) {\r\n      total[i] = [day, totalObj[day]]\r\n      i++\r\n    }\r\n\r\n    console.log(total)\r\n\r\n    const ratesCalculated  = total.map((dateAndAvailability) => {\r\n      const dateString     = dateAndAvailability[0]\r\n      const availability   = parseInt(dateAndAvailability[1])\r\n      const dateObject     = new Date(dateString)\r\n      const now            = Date.now()\r\n      const daysUntilDate  = 1 + Math.floor((dateObject - now)/1000/60/60/24);\r\n      const month          = dateObject.getMonth()\r\n      const weekendBonus   = weekendValue(dateObject)\r\n\r\n      const seasonalBonus  = seasonalValue(dateObject)\r\n      const occupancy      = availability/47\r\n      const occupancyBonus = (1-occupancy) * occupancyWeight //\r\n      const expectedRooms  = Math.min(Math.pow(daysUntilDate/180, 0.7), 1) //\r\n      const futureBonus    = (1-expectedRooms)*futureWeight //\r\n      const lastRoomsBonus = Math.pow(1-occupancy, 8)*occupancyWeight*1.5 //\r\n      const sellOffRatio   = Math.min(Math.pow((187 - daysUntilDate)/180, 6.5), 1) //\r\n      const sellOffBonus   = sellOffRatio * sellOffWeight //\r\n      const superDayBonus  = superDayValue(dateObject)\r\n\r\n      const rateShift      = occupancyBonus - futureBonus //\r\n      const baseRate       = priceFloor + rateShift + seasonalBonus /* + SUPERDAY BONUS */\r\n      const baseRatePlus   = baseRate - sellOffBonus + weekendBonus + lastRoomsBonus + superDayBonus\r\n      const absFloorPlus   = absPriceFloor + weekendBonus\r\n\r\n      const finalRate      = Math.max(absFloorPlus, baseRatePlus)\r\n\r\n      return [dateString, finalRate, availability]\r\n    })\r\n\r\n    return ratesCalculated\r\n  }\r\n\r\n  const groupCalculator = (settingsInput, rates, availability) => {\r\n    console.log(\"Hahahahaha\")\r\n  }\r\n\r\n  return {getRates: getRates}\r\n})"]}